##PURPOSE: Insert functions neccessary for Eyelink integration and perform EyeLink Setup
##LOCATION: This should be implemented as a code element, in the "begin experiment" tab of your first Routine. I would even reccomend just creating a Routine called "el_setup".


eyetracking=True

if eyetracking:
#This Code  loads ingredients for Eyelink integration to Psychopy. Steps are called together in el_setup at the top of the experiment code. 

    #STEP 1: Ingredients neccessary
    #pylink is the eyelink package for psychopy
    import psychopy
    from pylink import *
    #pygame is explicitly used to take screenshots and write them to data viewer
    from pygame import *
    import time
    import gc #unclear whether we need this for this specific experiment but leaving in just in case
    import sys
    import os

    #This is the eyelink core graphics library and contains the calibration rolutine
    from EyeLinkCoreGraphicsPsychoPy import EyeLinkCoreGraphicsPsychoPy


    #Here we will set up some variables that will help us out later.
    #This guy is helpful for setting up function loops, so the experiment can run with or without eye tracking
    eyetracking=True
    #these are set up for getting gaze position data in a loop that checks for eye data samples later
    RIGHT_EYE = 1
    LEFT_EYE = 0
    BINOCULAR = 2
    #these are used in setting up display coordinates and calculating screen size for a variety of functions
    screen_width=win.size[0]
    screen_height=win.size[1]

    #STEP 2: Intiialize connection to tracker
    el = EyeLink('100.1.1.1')

    #STEP 3:Open edf file and give it a string name <8 characters

    #Open Edf File ASAP to make sure we don't miss anything
    #Make sure you set the expinfo information you want in experiment settings before trying to call on them.
    edfFileName = "X_%s_%s.edf" %(expInfo['participant'],expInfo['participant initials'])
    el.openDataFile(edfFileName)  

    #STEP 4" Set Offline Mode and start tracker configuration

    # This is not step 4, more like a Step 1 for Step 7: Maybe has to happen after initializing connection?
    #call the custom calibration routine "EyeLinkCoreGraphicsPsychopy.py"
    genv = EyeLinkCoreGraphicsPsychoPy(el, win)
    openGraphicsEx(genv)

    # the flush just clears all keypresses
    #flushGetkeyQueue()
    #set offline mode
    el.setOfflineMode()


    #STEP 4 continued: get tracker version and set parser configuration.
    tracker_software_ver = 0
    eyelink_ver = el.getTrackerVersion()
    if eyelink_ver == 3:
        tvstr = el.getTrackerVersionString()
        vindex = tvstr.find("EYELINK CL")
        tracker_software_ver = int(float(tvstr[(vindex + len("EYELINK CL")):].strip()))
     

    if eyelink_ver>=2:
        el.sendCommand("select_parser_configuration 0")
        if eyelink_ver == 2: #turn off scenelink camera stuff
            el.sendCommand("scene_camera_gazemap = NO")
    else:
        el.sendCommand("saccade_velocity_threshold = 35")
        el.sendCommand("saccade_acceleration_threshold = 9500")

    #BoEI STEP 5: Get Display surface adn Draw to Data Viewer
    #Gets the display surface and sends a mesage to EDF file;
    #see here we call screen width and height!
    el.sendCommand("screen_pixel_coords =  0 0 %d %d" %(screen_width - 1, screen_height - 1))
    el.sendMessage("DISPLAY_COORDS  0 0 %d %d" %(screen_width - 1, screen_height - 1))

    # BoEI STEP 6: Set EDF file contents. SR research has a really good index of terms and functions (linked in our guide)
    #if you are curious about how these work. 
    el.sendCommand("file_event_filter = LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,INPUT")
    if tracker_software_ver>=4:
        el.sendCommand("file_sample_data  = LEFT,RIGHT,GAZE,AREA,GAZERES,STATUS,HTARGET,INPUT")
    else:
        el.sendCommand("file_sample_data  = LEFT,RIGHT,GAZE,AREA,GAZERES,STATUS,INPUT")

    # set link data (used for gaze cursor) 
    el.sendCommand("link_event_filter = LEFT,RIGHT,FIXATION,SACCADE,BLINK,BUTTON,INPUT")
    if tracker_software_ver>=4:
        el.sendCommand("link_sample_data  = LEFT,RIGHT,GAZE,GAZERES,AREA,STATUS,HTARGET,INPUT")
    else:
        el.sendCommand("link_sample_data  = LEFT,RIGHT,GAZE,GAZERES,AREA,STATUS,INPUT")

    el.sendCommand("button_function 5 'accept_target_fixation'");

    # ###########Options for custom calibaration settings. not neccessary but can be useful, see programmer's guide for details#########
    setCalibrationColors((0, 0, 0), (192, 192, 192));   #Sets the calibration target and background color
    setCalibrationSounds("", "", ""); #calls the beeps
    setDriftCorrectSounds("", "off", "off"); # we aren't doing drift correct
    el.sendCommand("calibration_type = HV9") # el.setCalibrationType('HV9') also supposedly works, see the Pylink manual
    #setTargetSize(int(screen_width/70), int(screen_width/300)); #select best size for calibration target, commented out bc we went with default
    #setTargetSize(27, 6); #select best size for calibration target, commented out bc we went with default

    #good to make sure the tracker is connected before setup!
    if(el.isConnected() and not el.breakPressed()):
        el.doTrackerSetup()